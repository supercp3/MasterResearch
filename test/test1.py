import math
# s1=[(0, 0.049644165546723386), (12, 0.03690454498359047), (20, 0.013431022282479131), (46, 0.02915050634320004), (125, 0.0505976694827446), (147, 0.008999672826721298), (150, 0.02240562806394902), (157, 0.014990269616168473), (161, 0.034116137711128626), (167, 0.04926300918908075), (188, 0.03248558213641064), (226, 0.04949061482316741), (271, 0.01568130588596623), (301, 0.05915307807033183), (323, 0.36927906664795057), (342, 0.055656469719272794), (363, 0.051181222088535566), (562, 0.08240515655019447), (647, 0.06400345522518436), (666, 0.03844501664609752), (759, 0.09294379380943624), (762, 0.06676812431992776), (774, 0.09676712032718046), (879, 0.2082139925858687), (881, 0.12726055457124097), (898, 0.03683908465987684), (910, 0.06959235941979355), (1088, 0.04669295289822206), (1201, 0.04926300918908075), (1277, 0.09294379380943624), (1502, 0.07158289930867127), (1558, 0.05860444588781649), (1636, 0.055656469719272794), (1709, 0.11304553840606239), (2070, 0.07013634128256553), (2181, 0.09183673914985904), (2548, 0.07824105855017796), (3504, 0.0983428031468041), (3511, 0.0807145492848263), (5782, 0.08804366179871186), (6472, 0.12416772827109514), (6705, 0.17782244109427905), (6986, 0.07918520898656849), (7695, 0.11766166427415009), (8218, 0.0898283803494754), (10284, 0.11304553840606239), (11483, 0.520329918372345), (11484, 0.4261578976364693), (13054, 0.11304553840606239), (13533, 0.13528991813612787), (13534, 0.12416772827109514), (13535, 0.13528991813612787), (13536, 0.12416772827109514), (13537, 0.13528991813612787), (13538, 0.13528991813612787)]
# s2=[(59, 0.100616155822238), (106, 0.040849806365818794), (133, 0.11812081536805398), (139, 0.04877155827882755), (140, 0.12486278747488615), (147, 0.04358370198804944), (149, 0.06055600119014424), (150, 0.03616873024890435), (160, 0.030003460341330924), (208, 0.07697775196062753), (323, 0.3576696420212598), (342, 0.08984456200635034), (391, 0.051434449211122536), (627, 0.06352659885452848), (666, 0.062060631932236945), (676, 0.08089725540343005), (764, 0.07506604758437828), (816, 0.1302950647896384), (879, 0.08402839356245138), (898, 0.059468224317421554), (1006, 0.19482494793279156), (1106, 0.11149151180915545), (1201, 0.0795237913225949), (1298, 0.07347765986127662), (1372, 0.06439342867096189), (1608, 0.0869349599732971), (1700, 0.16453179035749024), (1829, 0.09152834691469139), (2015, 0.10621779835494526), (2059, 0.19873907560106294), (2181, 0.1482492807507939), (3347, 0.1302950647896384), (8444, 0.1614809201843953), (8615, 0.1435267042232398), (8616, 0.1435267042232398), (10429, 0.16799058169072165), (11483, 0.3359811633814433), (11484, 0.1719834632515205), (12261, 0.02318408536514763), (12511, 0.18993767921267604), (12787, 0.17670603977907468), (17207, 0.1141279338072551), (20592, 0.4367888764819135), (20593, 0.21839443824095675)]
a=[(0, 0.049644165546723386), (12, 0.03690454498359047),(161, 0.034116137711128626)]
b=[(0, 0.049644165546723386), (12, 0.03690454498359047),(59, 0.100616155822238), (106, 0.040849806365818794)]

def cosine_similarity(a, b):
	res=sum([i*j for i,j in zip(a, b)])/(math.sqrt(sum([i*i for i in a]))* math.sqrt(sum([i*i for i in b])))
	return round(res,3)

def similar_string(a,b):
	m1,m2,n1,n2=[],[],[],[]
	for x in a:
		m1.append(x[0])
		n1.append(x[1])
	for y in b:
		m2.append(y[0])
		n2.append(y[1])
	vec=sorted(set(m1+m2))
	vec1=[0 for _ in vec]
	vec2=[0 for _ in vec]
	for i in range(len(vec)):
		if vec[i] in m1:
			vec1[i]=n1[m1.index(vec[i])]
		if vec[i] in m2:
			vec2[i]=n2[m2.index(vec[i])]
	res=cosine_similarity(vec1,vec2)
	return res



res=similar_string(a,b)
print(res)
# s=[1,2,3]
# print(s.index(1))

